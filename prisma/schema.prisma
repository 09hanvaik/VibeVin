// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  name          String?
  avatar        String?
  bio           String?
  role          String   @default("USER")
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  wallets       Wallet[]
  badges        Badge[]
  bounties      Bounty[]      @relation("BountyCreator")
  submissions   Submission[]
  prompts       Prompt[]
  content       Content[]
  sessions      Session[]

  @@map("users")
}

model Wallet {
  id            String    @id @default(cuid())
  address       String    @unique
  chain         String    // e.g., "ethereum", "polygon"
  balance       Float     @default(0)
  isConnected   Boolean   @default(false)
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Badge {
  id            String    @id @default(cuid())
  name          String
  description   String
  imageUrl      String?
  rarity        String   @default("COMMON")
  userId        String
  earnedAt      DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("badges")
}

model Bounty {
  id            String    @id @default(cuid())
  title         String
  description   String
  requirements  String
  reward        Float
  currency      String    @default("ETH")
  status        String   @default("ACTIVE")
  category      String
  tags          String    // JSON array of tags
  deadline      DateTime?
  maxSubmissions Int?
  creatorId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  creator       User      @relation("BountyCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  submissions   Submission[]

  @@map("bounties")
}

model Submission {
  id            String    @id @default(cuid())
  content       String
  attachments   String?   // JSON array of file URLs
  status        String   @default("PENDING")
  score         Float?
  feedback      String?
  bountyId      String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bounty        Bounty    @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Prompt {
  id            String    @id @default(cuid())
  title         String
  content       String
  category      String
  tags          String    // JSON array of tags
  usageCount    Int       @default(0)
  successRate   Float     @default(0)
  avgScore      Float     @default(0)
  isPublic      Boolean   @default(true)
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents      Content[]

  @@map("prompts")
}

model Content {
  id            String    @id @default(cuid())
  title         String
  content       String
  type          String   @default("TEXT")
  metadata      String?   // JSON object for additional data
  promptId      String?
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  prompt        Prompt?   @relation(fields: [promptId], references: [id], onDelete: SetNull)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content")
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
} 